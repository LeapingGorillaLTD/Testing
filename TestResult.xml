<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\SandboxHG\leapinggorilla.testing\LeapingGorilla.Testing\bin\Release-Net45\LeapingGorilla.Testing.dll" total="50" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2014-09-22" time="13:55:47">
  <environment nunit-version="2.6.3.13283" clr-version="2.0.50727.8009" os-version="Microsoft Windows NT 6.2.9200.0" platform="Win32NT" cwd="C:\SandboxHG\leapinggorilla.testing" machine-name="DevBox2" user="garyh" user-domain="LG" />
  <culture-info current-culture="en-GB" current-uiculture="en-US" />
  <test-suite type="Test Project" name="" executed="True" result="Success" success="True" time="1.112" asserts="0">
    <results>
      <test-suite type="Assembly" name="C:\SandboxHG\leapinggorilla.testing\LeapingGorilla.Testing\bin\Release-Net45\LeapingGorilla.Testing.dll" executed="True" result="Inconclusive" success="False" time="0.015" asserts="0" />
      <test-suite type="Assembly" name="C:\SandboxHG\leapinggorilla.testing\Tests\LeapingGorilla.Testing.Tests\bin\Release-Net45\LeapingGorilla.Testing.Tests.dll" executed="True" result="Success" success="True" time="0.589" asserts="0">
        <results>
          <test-suite type="Namespace" name="LeapingGorilla" executed="True" result="Success" success="True" time="0.577" asserts="0">
            <results>
              <test-suite type="Namespace" name="Testing" executed="True" result="Success" success="True" time="0.577" asserts="0">
                <results>
                  <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="0.576" asserts="0">
                    <results>
                      <test-suite type="TestFixture" name="WhenTestingAnAsyncMethod" executed="True" result="Success" success="True" time="0.156" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingAnAsyncMethod.ResultShouldBeAsExpected" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingAttemptingToMockAnInvalidType" executed="True" result="Success" success="True" time="0.076" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingAttemptingToMockAnInvalidType.SetupExceptionShouldBeAnOnlyInterfacesMayBeAutoGeneratedAsDependenciesException" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingAttemptingToMockAnInvalidType.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjection" executed="True" result="Success" success="True" time="0.249" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjection.TheFakeLoggerShouldBeCreated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjection.TheSimpleClassShouldBeCreated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjection.WeShouldReceiveACallToLog" executed="True" result="Success" success="True" time="0.021" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjectionAgainstDifferentPrivacyLevels" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionAgainstDifferentPrivacyLevels.PrivateFieldShouldBeMocked" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionAgainstDifferentPrivacyLevels.PrivatePropertyShouldBeMocked" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionAgainstDifferentPrivacyLevels.ProtectedFieldShouldBeMocked" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionAgainstDifferentPrivacyLevels.ProtectedPropertyShouldBeMocked" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionAgainstDifferentPrivacyLevels.PublicFieldShouldBeMocked" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionAgainstDifferentPrivacyLevels.PublicPropertyShouldBeMocked" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjectionWithAField" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithAField.TheFakeLoggerShouldBeCreated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithAField.TheSimpleClassShouldBeCreated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithAField.WeShouldReceiveACallToLog" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjectionWithInvalidAccessLevelOnMock" executed="True" result="Success" success="True" time="0.010" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithInvalidAccessLevelOnMock.MockShouldNotBeCreated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithInvalidAccessLevelOnMock.SetupExceptionShouldBeACannotMockPrivateFieldsException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithInvalidAccessLevelOnMock.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjectionWithInvalidDependencies" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithInvalidDependencies.SetupExceptionShouldBeADependencyMismatchException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithInvalidDependencies.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjectionWithMissingDependencies" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithMissingDependencies.SetupExceptionShouldBeANoMatchingConstructorFoundException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithMissingDependencies.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjectionWithNoItemUnderTest" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithNoItemUnderTest.SetupExceptionShouldBeANoItemUnderTestException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithNoItemUnderTest.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingDependencyInjectionWithWrongDependencies" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithWrongDependencies.SetupExceptionShouldBeANoMatchingConstructorFoundException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingDependencyInjectionWithWrongDependencies.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingGivenMethodsWithDifferentAccessLevels" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingGivenMethodsWithDifferentAccessLevels.PrivateGivenShouldBeCalled" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingGivenMethodsWithDifferentAccessLevels.ProtectedGivenShouldBeCalled" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingGivenMethodsWithDifferentAccessLevels.PublicGivenShouldBeCalled" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingMocking" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingMocking.PublicFieldMockShouldBeCreated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingMocking.PublicPropertyMockShouldBeCreated" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingMultipleGivenMethods" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingMultipleGivenMethods.Given1ShouldBe1" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingMultipleGivenMethods.Given2ShouldBe2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingMultipleGivenMethods.Given3ShouldBe3" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingMultipleGivenMethods.TheCounterShouldBeSetAtThree" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingSetupWithAGivenMethodThatHasAReturnType" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAGivenMethodThatHasAReturnType.SetupExceptionShouldBeAGivenMethodsMustBeVoidException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAGivenMethodThatHasAReturnType.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingSetupWithAGivenMethodWithParameters" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAGivenMethodWithParameters.SetupExceptionShouldBeAGivenMethodMayNotHaveParametersException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAGivenMethodWithParameters.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingSetupWithAWhenMethodThatHasAReturnType" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAWhenMethodThatHasAReturnType.SetupExceptionShouldBeAWhenMethodsMustBeVoidException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAWhenMethodThatHasAReturnType.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingSetupWithAWhenMethodWithParameters" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAWhenMethodWithParameters.SetupExceptionShouldBeAWhenMethodMayNotHaveParametersException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithAWhenMethodWithParameters.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingSetupWithTooManyWhenFields" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithTooManyWhenFields.SetupExceptionShouldBeAWhenMethodMayOnlyAppearOnceException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingSetupWithTooManyWhenFields.SetupShouldThrowAnException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="TestFixture" name="WhenTestingStubbing" executed="True" result="Success" success="True" time="0.015" asserts="0">
                        <results>
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingStubbing.EventRaiserShouldBeCalledTwice" executed="True" result="Success" success="True" time="0.002" asserts="0" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingStubbing.NonSevereReturnShouldMatchResponse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingStubbing.SevereReturnShouldMatchResponse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingStubbing.WeShouldHaveANonSevereReturn" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="LeapingGorilla.Testing.Tests.WhenTestingStubbing.WeShouldHaveASevereReturn" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>